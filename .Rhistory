install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
getpw()
getwd()
y <- c(1.7,"a");
y
y <- c(1.7,"a", TRUE);
y
y[1]
y[2]
y[3]
y[3][1]
y[3,1]
y[3][3]
y[3][2]
-1:1
1:-1
a <- list("a",1,TRUE)
a
a[1]
a <- list(c("a",b),1,TRUE)
a <- list(c("a","b"),1,TRUE)
a
a[1]
a[1][1]
a[[1]]
a[[1]][2]
a[[1]][1]
x<- list(a = 1:5, b = rnorm(10))
x
runif()
runif
rep
rep?
;
repÂ¿
man
rep(4)
rep(4:1)
rep(4:1,2)
rep(4:1,1:5)
1/0
0/0
library(datasets)
data(iris)
iris
iris[1]
iris[4]
iris[5]
iris[5]=='virginica'
iris[1][iris[5]=='virginica']
mean(iris[1][iris[5]=='virginica'])
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mpg, cyl, mean)
hola <- tapply(mtcars$hp, mtcars$cyl, mean)
hola
hola[1] - hola[3]
debug(ls)
ls
debug(ls)
debug(lsa)
exit
q
quite()
;
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names, sorted))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
debug(ls)
3
;
8
rowMeans(iris[, 1:4])
mean(iris[1][iris[5]=='virginica'])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
hola[1] - hola[3]
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:5)
vector_cache <- makeVector(1:5)
getmean <- function() m
clear()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
vector_cache <- makeVector(1:5)
vector_cache
vector_cache$get()
vector_cache$getmean()
vector_cache$setmean()
vector_cache$set()
vector_cache$set(vector_cache$get())
vector_cache$set()
vector_cache
vector_cache$setmean()
vector_cache$getmean()
vector_cache$get()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vector_cache$getmean()
vector_cache$setmean(5)
vector_cache$getmean()
cachemean(vector_cache)
vector_cache$setmean(NULL)
cachemean(vector_cache)
cachemean(vector_cache)
cachemean(vector_cache)
cachemean(vector_cache)
setwd("/Users/ramoncito/Desktop/Coursera/Data Science Specialization/3 - Getting and Cleaning Data/CourseProject")
training <- read.csv("UCI HAR Dataset/train/X_train.txt")
dim(training)
training <- read.delim("UCI HAR Dataset/train/X_train.txt")
dim(training)
training <- read.delim("UCI HAR Dataset/train/X_train.txt", sep = " ")
training <- read.delim("UCI HAR Dataset/train/X_train.txt", sep = " ")
dim(training)
training_l<- read.delim("UCI HAR Dataset/train/y_train.txt")
training_l
dim(training)
dim(training_l)
training_s <- read.delim("UCI HAR Dataset/train/subject_train.txt")
dim(training_s)
training d <- read.delim("UCI HAR Dataset/train/X_train.txt")
training_d <- read.delim("UCI HAR Dataset/train/X_train.txt")
dim(training_d)
378*2
378*7351
11227*662
training_d <- read.ftable("UCI HAR Dataset/train/X_train.txt")
training_d <- read.delim("UCI HAR Dataset/train/X_train.txt", sep = "")
dim(training_d)
